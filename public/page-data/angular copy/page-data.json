{"componentChunkName":"component---src-templates-docs-js","path":"/angular copy","result":{"data":{"site":{"siteMetadata":{"title":"Style guides and learning materials for devs, to build lightning fast apps ðŸš€ | learningHub","docsLocation":"https://github.com/neoito-hub/learningHub"}},"mdx":{"fields":{"id":"c05a24eb-14cd-58b1-9173-38f484570179","title":"Angular Copy","slug":"/angular copy"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"title: \\\"Angular\\\"\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Naming of variables should be 'VerbNoun' phrased with camel casing. The possible verb and noun naming for different modules will be there in each project ReadMe.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For Redux based applications, the store data should be run through a VO service which will be input to the presentation component\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The logic to fetch and set data will be in container component while the presentation component will be dump and it will just show the data from inputs\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In maximum possible cases use the change detection strategy onPush.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"For singleton services take care to use root 'provideIn' to avoid multiple instantiations if not required.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Ideally a function should not be longer than 50-60 lines. Split the code and group them in a neat and readable way.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Every method should have its signature commented on top.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Strict typing should be ensured everywhere. Avoid use of 'any'.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always have :TODO labelled for anything which is to be postponed to do later.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Use alias for import routes accordingly as need in tsconfig. This will make it easy to write imports. ex:\\n\\\"compilerOptions\\\": {\\n\\\"paths\\\": {\\n\\\"@app/\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\\": [\\\"app/\"), \"\\\"],\\n\\\"@env/\", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\\": [\\\"environments/\"), \"\\\"]\\n}\\n}\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write business comments rather than short technical comments.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Every rxjs subscription handles should be pushed to an array / use subscription.add(), and unsubscribed accordingly(for components, it can be inside ngDestroy hooks)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Strictly follow the order of declaring class variables and methods in components as in the specified linting rule.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Components should always have subscriptions (no observable chaining is needed inside a component, such can be delegated to vo or va services.)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Event binding methods should return quickly to ensure short change detection cycles. If its doing heavy computations, make it async.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Avoid use of nested subscriptions, instead use proper observable chaining to get the job done.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always use take(1) operator if we do not need to observe for further emissions.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always use lazy loading of modules.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Have shared modules for sharing services and variables\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always have selector naming of components in a particular format(preferably prefixed with application name abbreviation)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Avoid making htmls smart by using expressions and pipes, rather use utility functions which can do the manipulations at VO level.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"VO stands for View Object, which is the object that's made from the database object, which can be directly rendered with UI layer\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"VA stands for View Actions, which deals with handling the actions from the view layer.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"DBO stands for the Database Object.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Module naming, service naming, component naming and route naming should be having a specific formatting which should be mentioned in the project readme. Default naming should be\\nModule - entity name suffixed with 'Module', ex: ProductModule. here use the entity name as singular.\\nComponent - entity name suffixed with 'Component', ex: ProductComponent\"), mdx(\"li\", {\n    parentName: \"ol\"\n  })), mdx(\"h3\", null, \"NgRx guidelines\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"All actions description should follow a particular syntax, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[<module>] <Action description>\"), \". The syntax should be specified in the readme.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always remember to have the default case in all reducers.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Every reducer should have proper interfaces and initial values\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always have loaded and loading variables populated while doing side effects and have proper selectors for them.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write selectors in a separate file always.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Avoid writing logic inside reducer methods, instead just add the data to the state.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Remember to clear state data and reset to initial state when logout occurs.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Side effect actions should have success and failure case handled.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"integration with the apis should be done at different set of service files, which are in turn called from effects.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Data input to these service files might be vo, which should be converted to dbo before sending with the api.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Core module is the module which has Actions, reducers, api services, effects, and selectors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always have entities in the reducer than plain array and use ngrx entity adapter to fetch and add data.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#title-angular","title":"title: \"Angular\"","items":[{"url":"#ngrx-guidelines","title":"NgRx guidelines"}]}]},"parent":{"__typename":"File","relativePath":"angular copy.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/git","title":"Git"}}},{"node":{"fields":{"slug":"/","title":"Neoito Developer's Guide"}}},{"node":{"fields":{"slug":"/angular","title":"Angular"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/linux","title":"Linux"}}},{"node":{"fields":{"slug":"/newcomers","title":"Newcomers"}}},{"node":{"fields":{"slug":"/python","title":"Python"}}},{"node":{"fields":{"slug":"/nativescript","title":"Nativescript"}}},{"node":{"fields":{"slug":"/style-guide","title":"Style Guide"}}},{"node":{"fields":{"slug":"/linux/shell","title":"Shell"}}},{"node":{"fields":{"slug":"/angular copy","title":"Angular Copy"}}}]}},"pageContext":{"id":"c05a24eb-14cd-58b1-9173-38f484570179"}}}